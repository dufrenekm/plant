// Generated by gencpp from file plant_arm_project/PlantLocationRequest.msg
// DO NOT EDIT!


#ifndef PLANT_ARM_PROJECT_MESSAGE_PLANTLOCATIONREQUEST_H
#define PLANT_ARM_PROJECT_MESSAGE_PLANTLOCATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace plant_arm_project
{
template <class ContainerAllocator>
struct PlantLocationRequest_
{
  typedef PlantLocationRequest_<ContainerAllocator> Type;

  PlantLocationRequest_()
    : loc()  {
    }
  PlantLocationRequest_(const ContainerAllocator& _alloc)
    : loc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _loc_type;
  _loc_type loc;





  typedef boost::shared_ptr< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlantLocationRequest_

typedef ::plant_arm_project::PlantLocationRequest_<std::allocator<void> > PlantLocationRequest;

typedef boost::shared_ptr< ::plant_arm_project::PlantLocationRequest > PlantLocationRequestPtr;
typedef boost::shared_ptr< ::plant_arm_project::PlantLocationRequest const> PlantLocationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator1> & lhs, const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.loc == rhs.loc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator1> & lhs, const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plant_arm_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb0dc5489379f237f7e1998a10d754a3";
  }

  static const char* value(const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb0dc5489379f237ULL;
  static const uint64_t static_value2 = 0xf7e1998a10d754a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plant_arm_project/PlantLocationRequest";
  }

  static const char* value(const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 loc\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlantLocationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plant_arm_project::PlantLocationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plant_arm_project::PlantLocationRequest_<ContainerAllocator>& v)
  {
    s << indent << "loc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.loc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANT_ARM_PROJECT_MESSAGE_PLANTLOCATIONREQUEST_H
